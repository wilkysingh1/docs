package com.scb.cic.auth.jaxrs;


import java.sql.Timestamp;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import static org.mockito.Mockito.when;
import java.util.List;

import javax.ws.rs.core.Response;

import com.scb.cic.mobile.auth.dao.LoginDAO;
import com.scb.cic.mobile.auth.dto.revenuebreakdown.GridRequest;
import com.scb.cic.mobile.auth.dto.revenuebreakdown.RevenueVOResponse;
import com.scb.cic.mobile.auth.jaxrs.MobileController;
import com.scb.cic.mobile.auth.model.EntitySearchList;
import com.scb.cic.mobile.auth.model.RmwbLoginAuditLog;
import com.scb.cic.mobile.auth.service.MobileService;
import static org.mockito.Matchers.any;
import javax.ws.rs.core.Response;
import static org.mockito.MockitoAnnotations.initMocks;

import static org.junit.Assert.*;

public class MobileControllerTest {



private MobileController mobileController;

@Mock
private MobileService mobileService;

private RevenueVOResponse revenueVOResponse;

private Response response;



@Before
public void setUp() throws Exception {
 initMocks(this);
mobileController = new MobileController();
mobileController.setMobileService(mobileService);

//revenueVOResponse = new RevenueVOResponse();

}

@Test
public void revenueBreakDownTestForStatus200() {
	
 GridRequest gridRequest = new GridRequest();

MobileController mobileController = PowerMockito.spy(new MobileController());
mobileController.setMobileService(mobileService);

revenueVOResponse = new RevenueVOResponse();

when(mobileService.getRevenueDetails(any(GridRequest.class))).thenReturn(revenueVOResponse);

	//Response expectedResponse = Response.status(200).entity(revenueVOResponse).build();
    Response actualResponse = mobileController.revenueBreakDown(gridRequest);
    assertNotNull(actualResponse);
}

@Test(expected=java.lang.Exception.class)
public void revenueBreakDownTestForStatus500() {
 GridRequest gridRequest = new GridRequest();

MobileController mobileController = PowerMockito.spy(new MobileController());
mobileController.setMobileService(mobileService);
revenueVOResponse = new RevenueVOResponse();

Mockito.doThrow(new RuntimeException("500")).when(mobileService.getRevenueDetails(any(GridRequest.class)));

mobileController.revenueBreakDown(gridRequest);

}


@Test
public void keyFinancialsTestForStatus200() {
		List<Object>  revenueDetails = null;
		
		String requestJson = null;
		MobileController mobileController = PowerMockito.spy(new MobileController());
        mobileController.setMobileService(mobileService);
		when(mobileService.getKeyFinancialDetails(any(String.class))).thenReturn(revenueDetails);
		
	Response expectedResponse = Response.status(200).entity(revenueDetails).build();
    Response actualResponse = mobileController.keyFinancials(requestJson);
   // assertSame(actualResponse, expectedResponse);
    assertNotNull(actualResponse);
		
}


@Test(expected=java.lang.Exception.class)
public void keyFinancialsTestForStatus500() {
		
	String requestJson = null;

	MobileController mobileController = PowerMockito.spy(new MobileController());
	mobileController.setMobileService(mobileService);
	revenueVOResponse = new RevenueVOResponse();

	Mockito.doThrow(new RuntimeException("500")).when(mobileService.getKeyFinancialDetails((any(String.class))));

	mobileController.keyFinancials(requestJson);
		
	}

@Test
public void entitySuggestionsTestForStatus200() {
GridRequest gridRequest = new GridRequest();
	EntitySearchList entitySearchList = null;
	
	MobileController mobileController = PowerMockito.spy(new MobileController());
    mobileController.setMobileService(mobileService);
	when(mobileService.getEntitySuggestions(any(GridRequest.class))).thenReturn(entitySearchList);
	
	Response actualResponse = mobileController.entitySuggestions(gridRequest);
  // assertSame(actualResponse, expectedResponse);
  assertNotNull(actualResponse);
	
	}

@Test(expected=java.lang.Exception.class)
public void entitySuggestionsTestForStatus500() {
		
	GridRequest gridRequest = new GridRequest();
	

	MobileController mobileController = PowerMockito.spy(new MobileController());
	mobileController.setMobileService(mobileService);
	
	Mockito.doThrow(new RuntimeException("500")).when(mobileService.getEntitySuggestions(any(GridRequest.class)));

	mobileController.entitySuggestions(gridRequest);
		
	}

}
